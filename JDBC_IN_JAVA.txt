
		----------------------------------------------------------------------
									Java JDBC
		----------------------------------------------------------------------
- JDBC stands for Java Database Connectivity.
- JDBC is a Java API to connect and execute the query with the database.
- It is a part of JavaSE (Java Standard Edition).
- JDBC API uses JDBC drivers to connect with the database.
- JDBC provides a standard interface for Java applications to connect to a wide range of 
	relational databases, execute SQL queries, and retrieve results.

Key Components of JDBC:
-----------------------------
1. JDBC Drivers
	- These are Java classes that implement the JDBC API 
	- And handle communication between Java applications and the database
	- There are Four Types.
		Type 1: JDBC-ODBC Bridge Driver (deprecated)
		Type 2: Native-API Driver
		Type 3: Network Protocol Driver
		Type 4: Thin Driver (pure Java driver)

2. DriverManager: 
	 - This class manages a list of database drivers. 
	 - It is used to establish a connection to the database by selecting an appropriate driver.

3. Connection: 
	- Represents a session with a specific database. 
	- It is used to create Statement, PreparedStatement, and CallableStatement objects to execute SQL queries.

4. Statement: 
	- Used to execute SQL queries against the database. There are three types:
		- Statement: For executing simple SQL queries.
		- PreparedStatement: For executing precompiled SQL queries with parameters, which helps prevent SQL injection and improves performance.
		- CallableStatement: For executing stored procedures.

5. ResultSet: 
	- Represents the result set of a query. 
	- It provides methods to iterate through the results and retrieve data.
	
6. SQLException: 
	- Handles any SQL errors that occur during database interaction.
	

Importance of JDBC in Java:
	- Database Connectivity
	- Ease of Use
	- Portability
	- Performance
	- Integration
	- Transaction Management
	
	
What is API?
--------------------

- API stands for Application Programming Interface
- It is a document that contains a specification/description of all the features of a product or software.
- It represents classes and interfaces that software programs can follow to communicate with each other.
- An API can be created for applications, libraries, operating systems, etc.
Ex: We can use JDBC API to access tabular data stored in any relational database

- The current version of JDBC is 4.3.
- The java.sql package contains classes and interfaces for JDBC API.
- A list of popular interfaces of JDBC API are
    Driver interface
    Connection interface
    Statement interface
    PreparedStatement interface
    CallableStatement interface
    ResultSet interface
    ResultSetMetaData interface
    DatabaseMetaData interface
    RowSet interface

- A list of popular classes of JDBC API are
    DriverManager class
    Blob class
    Clob class
    Types class


Types of Drivers : 
-------------------
- JDBC Driver is a software component that enables java application to interact with the database.


Type 1: JDBC-ODBC Bridge Driver:
	- It uses the JDBC-ODBC bridge to convert JDBC calls into ODBC (Open Database Connectivity) calls. 
	- This type of driver relies on an ODBC driver to communicate with the database.
	- Deprecated as of Java 8 and removed in Java 9
	- CONS
		- Limited portability
		- The ODBC driver needs to be installed on the client machine.
		- Performance degraded


Type 2: Native-API Driver (Partially Java Driver)
	- Type 2 drivers convert JDBC calls into database-specific native API calls. 
	- They require native libraries specific to the database.
	- Better performance than Type 1 
	- CONS: 
		- Less portable
		- Native driver needs to be installed on the each client machine.
		- Vendor client library needs to be installed on client machine.


Type 3: Network Protocol Driver (Middleware Driver)
	- Type 3 drivers use a middleware server to translate JDBC calls into database-specific calls. 
	- The middleware server (application server) communicates with the database.
	- The driver communicates with a middleware server using a network protocol, which then interacts with the database.
	- Better performance than Type 1 due to centralized driver management 
	- CONS: 
		- Network support is required on client machine
		- Maintenance of Network Protocol driver becomes costly

Type 4: Thin Driver (Pure Java Driver)
	- Type 4 drivers are written entirely in Java and communicate directly with the database using database-specific protocols
	- They do not require any native code or middleware.
	- High Performance , Portable 
	- The most commonly used type of driver for modern Java application
	

Driver Type		  	Description								Performance								Portability											Usage
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Type 1				JDBC-ODBC Bridge Driver						Slow								Limited (requires ODBC)								Deprecated; historically used for legacy databases
Type 2				Native-API Driver (Partially Java)			Better than Type 1					Less portable (requires native libraries)			High performance scenarios with available native libraries
Type 3				Network Protocol Driver (Middleware)		Good, but with network latency		More portable (centralized driver)					Centralized driver management for multiple databases
Type 4				Thin Driver (Pure Java)						Best								Highly portable (pure Java)							Most commonly used for modern Java applications
	

Example:
- JDBC drivers are usually provided by third-party vendors or open-source projects 
- Must be explicitly included in your project's classpath. 
- This means we need to add the appropriate driver JAR file for your database (e.g., MySQL, PostgreSQL, Oracle) 
	- MySQL: we would use the MySQL Connector/J driver.
	- PostgreSQL: we would use the PostgreSQL JDBC driver.
	- Oracle: we would use the Oracle JDBC driver.
	

Java Database Connectivity with 5 Steps
-------------------------------------------
1. Load the JDBC Driver:
	- Before we can connect to a database, we need to load the JDBC driver that is specific to your database. 
	- This driver is a library that handles the communication between Java application and the database.
	- Since JDBC 4.0, explicitly registering the driver is optional.
    - We just need to put vender's Jar in the classpath, and then JDBC driver manager can detect and load the driver automatically.

	ex: Class.forName("com.mysql.cj.jdbc.Driver"); // For MySQL
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Class.forName("org.postgresql.Driver");

2. Establish a Connection: 
	- Next, we need to establish a connection to the database using the DriverManager.getConnection() method. 
	- This requires a JDBC URL, which specifies the location of the database, and credentials (username and password).
	
Methods:
	1) public static Connection getConnection(String url)throws SQLException  
	2) public static Connection getConnection(String url,String name,String password)  throws SQLException

Example: 
	String url = "jdbc:mysql://localhost:3306/mydatabase";
	String user = "root";
	String password = "password";
	Connection connection = DriverManager.getConnection(url, user, password);

3. Create a Statement: 
	- Once we have a connection, we use it to create a Statement object. 
	- This object is used to execute SQL queries. 
	- We can create a Statement, PreparedStatement, or CallableStatement depending on needs.

Example:
	
	Statement statement = connection.createStatement();

4. Execute Queries:

- With the Statement object, we can execute SQL queries using methods 
	- executeQuery() for SELECT queries 
	- executeUpdate() for INSERT, UPDATE, and DELETE queries.
- These Queries will return resultset which contains databae retrieve data.

	
Example:
	// For SELECT queries
	ResultSet resultSet = statement.executeQuery("SELECT * FROM users");

	// For INSERT, UPDATE, DELETE queries
	int rowsAffected = statement.executeUpdate("INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com')");


5. Process Results and Clean Up:
	- After executing a query, if we performed a SELECT operation, we need to process the ResultSet returned. 
	- For other operations, we should handle the number of affected rows. 
	- Finally, itâ€™s important to close the ResultSet, Statement, and Connection to free up resources.
	
	
Example:
	// Processing the ResultSet
	while (resultSet.next()) {
		int id = resultSet.getInt("id");
		String name = resultSet.getString("name");
		String email = resultSet.getString("email");
		System.out.println(id + ": " + name + " (" + email + ")");
	}

	// Close resources
	resultSet.close();
	statement.close();
	connection.close();


Example Program:
	
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class JDBCExample {
    public static void main(String[] args) {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Step 1: Load the JDBC driver (optional for modern drivers)
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Step 2: Establish a connection
            String url = "jdbc:mysql://localhost:3306/mydatabase";
            String user = "root";
            String password = "password";
            connection = DriverManager.getConnection(url, user, password);

            // Step 3: Create a statement
            statement = connection.createStatement();

            // Step 4: Execute a query
            resultSet = statement.executeQuery("SELECT * FROM users");

            // Step 5: Process results and clean up
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String email = resultSet.getString("email");
                System.out.println(id + ": " + name + " (" + email + ")");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
			if (resultSet != null) resultSet.close();
			if (statement != null) statement.close();
			if (connection != null) connection.close();
        }
    }
}



	=======================================================================================================================
												DriverManager class 
	=======================================================================================================================
- The DriverManager class in Java is a crucial component of the JDBC (Java Database Connectivity) API. 
- It's responsible for managing a list of database drivers and establishing connections to a database.
- The DriverManager class acts as an interface between users and drivers.

Key Responsibilities:
-------------------------
- Driver Management
- Connection Establishment

Methods:
1. public static Connection getConnection(String url) throws SQLException: 
	- Establishes a connection to the specified database URL.
	- Returns: A Connection object that represents the connection to the database.
	Ex: 
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydatabase");

2. public static Connection getConnection(String url,String userName,String password) throws SQLException :
	- Establishes a connection to the specified database URL with the provided username and password for authentication
	- Returns: A Connection object.
	Ex:
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydatabase", "username", "password");

3. public static void synchronized registerDriver(Driver driver) throws SQLException: 
	- Registers a driver with the DriverManager. After registration, DriverManager can use this driver to connect to the database.
	- Parameters: [driver] An instance of the Driver interface.
	ex:
		Driver myDriver = new com.mysql.cj.jdbc.Driver();
		DriverManager.registerDriver(myDriver);

4. public static void synchronized  deregisterDriver(Driver driver) throws SQLException:
	- Deregisters a driver from the DriverManager. 
	- This can be useful for cleaning up or removing drivers that are no longer needed.
	Ex:
		DriverManager.deregisterDriver(myDriver);

5. public static Enumeration<Driver> getDrivers(): 
	- Returns an enumeration of the drivers currently registered with the DriverManager.
	Ex:
		Enumeration<Driver> drivers = DriverManager.getDrivers();

Other Methods:
	- public static Driver getDriver(String url)
	- pubic static void setLoginTimeout(int sec)
	- public static Connection getConnection(String URL, Properties prop) throws SQLException
	- public static void setLogWriter(PrintWriter out)
	- public static PrintWriter getLogWriter()
	

	=======================================================================================================================
												Connection interface 
	=======================================================================================================================

- A Connection is a session between a Java application and a database. It helps to establish a connection with the database.
- The Connection interface in Java is a core component of the JDBC (Java Database Connectivity) API.
- It represents a connection to a specific database and provides methods to interact with the database through SQL queries and updates
- Connection interface Key Responsibilities:
    a)Establish and manage a session with a database.
    b)Execute SQL statements.
    c)Manage transactions.
    d)Retrieve metadata about the database.

### Methods ###:
1. public Statement createStatement(): 
	- creates a statement object that can be used to execute SQL queries.
	ex: Statement stmt = conn.createStatement();

2. public Statement createStatement(int resultSetType,int resultSetConcurrency): 
	- Creates a Statement object that will generate ResultSet objects with the given type and concurrency.

3. public PreparedStatement prepareStatement(String sql):
	- Creates a PreparedStatement object for sending precompiled SQL statements to the database.
	ex: PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM users WHERE id = ?");

4. public CallableStatement prepareCall(String sql):
	- Creates a CallableStatement object for calling stored procedures.
	ex: CallableStatement cstmt = conn.prepareCall("{call my_procedure(?, ?)}");


5. public void setAutoCommit(boolean status): 
	- is used to set the commit status. By default, it is true.
	
6. public void commit(): 
	- saves the changes made since the previous commit/rollback is permanent.

7. public void rollback(): 
	- Drops all changes made since the previous commit/rollback.

8. public void close(): 
	- closes the connection and Releases a JDBC resources immediately.

9. public DatabaseMetaData getMetaData():
	- Retrieves a DatabaseMetaData object that provides information about the database.
	ex: DatabaseMetaData metaData = conn.getMetaData();


### Connection Interface Fields

TRANSACTION_NONE: No transaction is supported, and it is indicated by this constant.

TRANSACTION_READ_COMMITTED: It is a constant which shows that the dirty reads are not allowed. 
	However, phantom reads and non-repeatable reads can occur.

TRANSACTION_READ_UNCOMMITTED: It is a constant which shows that dirty reads, non-repeatable reads, 
	and phantom reads can occur.

TRANSACTION_REPEATABLE_READ: It is a constant which shows that the non-repeatable reads and dirty reads are not allowed. However, phantom reads and can occurr.

TRANSACTION_SERIALIZABLE: It is a constant which shows that the non-repeatable reads, dirty reads as well as the phantom reads are not allowed.


	=======================================================================================================================
												Statement interface
	=======================================================================================================================
- The Statement interface in JDBC is used for executing SQL queries against a database.
- The Statement interface is used to execute SQL queries and updates. 
- It provides methods for running SQL statements and retrieving the results.

### Methods: ###
1. public ResultSet executeQuery(String sql)
	- Executes a SQL query that returns a ResultSet object, which contains the result of the query.
	- Typically used for SQL SELECT statements.
	ex:
		String sql = "SELECT * FROM employees";
		ResultSet rs = statement.executeQuery(sql);

2. public int executeUpdate(String sql)
	-  Executes a SQL statement that modifies the database (e.g., INSERT, UPDATE, DELETE) and returns the number of rows affected.
	-  used for data modification statements 
	ex:
		String sql = "UPDATE employees SET salary = 50000 WHERE id = 1";
		int rowsAffected = statement.executeUpdate(sql);

3. public boolean execute(String sql)
	- Executes a SQL statement that may return multiple results, such as an INSERT, UPDATE, DELETE, or SELECT statement. 
	- It returns a boolean indicating whether the result is a ResultSet or an update count.
	- Useful when the type of SQL statement and result type are not known in advance.
	ex:
		boolean hasResultSet = statement.execute(sql);
		if (hasResultSet) {
			ResultSet rs = statement.getResultSet();
		} else {
			int updateCount = statement.getUpdateCount();
		}

4. public int[] executeBatch():
	- Executes a batch of SQL statements that have been added to the Statement object using the addBatch() method.
	ex: 
		statement = connection.createStatement();

		// Add SQL commands to the batch
		statement.addBatch("INSERT INTO employees (name, salary) VALUES ('John Doe', 50000)");
		statement.addBatch("INSERT INTO employees (name, salary) VALUES ('Jane Smith', 60000)");
		statement.addBatch("INSERT INTO employees (name, salary) VALUES ('Mike Brown', 55000)");

		// Execute the batch
		int[] updateCounts = statement.executeBatch();
		
Other methods:
- public ResultSet getResultSet()
- public int getUpdateCount()
- public void setQueryTimeout(int seconds)
- public void addBatch(String sql)
- public void clearBatch()

	=======================================================================================================================
												ResultSet interface
	=======================================================================================================================

- ResultSet interface is used to represent the result set of a query that has been executed against a database.
- It provides methods to 
	a) retrieve the data from the result set
	b) navigate through the rows
	c) handle the data returned by SQL queries.
- A ResultSet object is obtained by executing a query using a Statement, PreparedStatement, or CallableStatement.
- NOTE: By default, ResultSet object can be moved forward only and it is not updatable.

### METHODS: ###
1.public boolean next(): 
	is used to move the cursor to the one row next from the current position
2.public boolean previous(): 
	is used to move the cursor to the one row previous from the current position.
3.public boolean first(): 
	is used to move the cursor to the first row in result set object.
4.public boolean last(): i
	s used to move the cursor to the last row in result set object.
5.public boolean absolute(int row): 
	is used to move the cursor to the specified row number in the ResultSet object.
	
6.public int getInt(int columnIndex): 
	is used to return the data of specified column index of the current row as int.
7.public int getInt(String columnName): 
	is used to return the data of specified column name of the current row as int.
8.public String getString(int columnIndex): 
	is used to return the data of specified column index of the current row as String.
9.public String getString(String columnName): 
	is used to return the data of specified column name of the current row as String.

Other Methods:
- public String getString(String columnLabel)
- public boolean getBoolean(String columnLabel)
- public double getDouble(String columnLabel)
- public Date getDate(String columnLabel)
- public Timestamp getTimestamp(String columnLabel)
- public ResultSetMetaData getMetaData()
- public void updateString(String columnLabel, String x)
- public void insertRow()
- public void deleteRow()
- public void close()

Example:

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class ResultSetExample {
    public static void main(String[] args) {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Load and register the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/mydatabase", "username", "password");
            
            // Create a Statement object
            statement = connection.createStatement();

            // Execute a query
            String query = "SELECT id, name, salary FROM employees";
            resultSet = statement.executeQuery(query);

            // Process the result set
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                double salary = resultSet.getDouble("salary");
                System.out.println("ID: " + id + ", Name: " + name + ", Salary: " + salary);
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}



	=======================================================================================================================
												PreparedStatement  interface
	=======================================================================================================================
- PreparedStatement interface extends the Statement interface
- It is used for executing precompiled SQL statements with parameterized inputs.
- It helps to improve performance, enhance security, and manage complex SQL queries more effectively.
- if we use - PreparedStatement interface because query is compiled only once

### METHODS ###
=> Execution Methods
1. executeQuery(): Executes a SQL query and returns a ResultSet object. Used for SELECT statements.
2. executeUpdate(): Executes a SQL statement that modifies the database and returns the number of rows affected. Used for INSERT, UPDATE, or DELETE statements.
3. execute(): Executes a SQL statement that may return multiple results. Returns a boolean indicating whether the result is a ResultSet or an update count.

=> Parameter Setting Methods
1. setString(int parameterIndex, String x)
	ex: preparedStatement.setString(1, "value");

2. setInt(int parameterIndex, int x)
	ex: preparedStatement.setInt(2, 100);

3. setDouble(int parameterIndex, double x)
	ex: preparedStatement.setDouble(3, 1000.50);

3. setDate(int parameterIndex, java.sql.Date x)
	ex: preparedStatement.setDate(4, new java.sql.Date(System.currentTimeMillis()));
	
4. setTimestamp(int parameterIndex, java.sql.Timestamp x)
	ex: preparedStatement.setTimestamp(5, new java.sql.Timestamp(System.currentTimeMillis()));

5. setNull(int parameterIndex, int sqlType
	ex: preparedStatement.setNull(6, java.sql.Types.VARCHAR);

Example:
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

public class PreparedStatementExample {
    public static void main(String[] args) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            // Load and register the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/mydatabase", "username", "password");

            // Create a PreparedStatement object
            String sql = "INSERT INTO employees (name, salary, hire_date) VALUES (?, ?, ?)";
            preparedStatement = connection.prepareStatement(sql);

            // Set parameters
            preparedStatement.setString(1, "Alice");
            preparedStatement.setDouble(2, 70000);
            preparedStatement.setTimestamp(3, new Timestamp(System.currentTimeMillis()));

            // Execute the update
            int rowsAffected = preparedStatement.executeUpdate();
            System.out.println("Rows affected: " + rowsAffected);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}


	=======================================================================================================================
												ResultSetMetaData interface
	=======================================================================================================================
- The metadata means data about data i.e. we can get further information from the data
- If we have to get metadata of a table like total number of column, column name, column type etc. ,
- ResultSetMetaData interface is useful because it provides methods to get metadata from the ResultSet object.
- The getMetaData() method of ResultSet interface returns the object of ResultSetMetaData

ex: public ResultSetMetaData getMetaData()throws SQLException  

### Methods ###:
1.public int getColumnCount() throws SQLException :
	it returns the total number of columns in the ResultSet object.

2.public String getColumnName(int index) throws SQLException :
	it returns the column name of the specified column index.

3.public String getColumnTypeName(int index) throws SQLException :
	it returns the column type name for the specified index.

4.public String getTableName(int index) throws SQLException :
	it returns the table name for the specified column index.

Example:
import java.sql.*;
class ResultSetMetaDataExample {
    public static void main(String args[]) {
        String dburl = "jdbc:mysql://localhost:3306/students";
        String username = "root";
        String passwd = "SqlAk@18";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection(dburl, username, passwd);
            PreparedStatement ps = conn.prepareStatement("select * from emp");
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            System.out.println("Total columns: " + rsmd.getColumnCount());
            System.out.println("Column Name of 1st column: " + rsmd.getColumnName(1));
            System.out.println("Column Type Name of 1st column: " + rsmd.getColumnTypeName(1));

            conn.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}


	=======================================================================================================================
										DatabaseMetaData interface
	=======================================================================================================================

- DatabaseMetaData interface provides methods to get meta data of a database such as 
	a) database product name
	b) database product version
	c) driver name
	c) total number of tables
	d) total number of views etc.

- The getMetaData() method of Connection interface returns the object of DatabaseMetaData.

ex: public DatabaseMetaData getMetaData() throws SQLException  

### METHODS ###
1. public String getDriverName()throws SQLException: 
	it returns the name of the JDBC driver.

2. public String getDriverVersion()throws SQLException: 
	it returns the version number of the JDBC driver.

3. public String getUserName()throws SQLException: 
	it returns the username of the database.

4. public String getDatabaseProductName()throws SQLException: 
	it returns the product name of the database.

5. public String getDatabaseProductVersion()throws SQLException: 
	it returns the product version of the database.

6. public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)throws SQLException:
	it returns the description of the tables of the specified catalog. 
	The table type can be TABLE, VIEW, ALIAS, SYSTEM TABLE, SYNONYM etc.

Example:
import java.sql.*;

public class DataBaseMetaDataExample {
    public static void main(String args[]){  
        String dburl = "jdbc:mysql://localhost:3306/company";
        String username = "root";
        String passwd = "SqlTest@18";
		 try{  
			//register the driver -1
			Class.forName("com.mysql.cj.jdbc.Driver");

			//create connection -2
			Connection con = DriverManager.getConnection(dburl, username , passwd); 
			 DatabaseMetaData dbmd=con.getMetaData();  
			   
			 System.out.println("Driver Name: "+dbmd.getDriverName());  
			 System.out.println("Driver Version: "+dbmd.getDriverVersion());  
			 System.out.println("UserName: "+dbmd.getUserName());  
			 System.out.println("Database Product Name: "+dbmd.getDatabaseProductName());  
			 System.out.println("Database Product Version: "+dbmd.getDatabaseProductVersion());  

			// print all tables
			 String table[]={"TABLE"};  
			ResultSet rs=dbmd.getTables(null,null,null,table);  
			
			while(rs.next()){  
				System.out.println(rs.getString(3));  
			}  
			// print all views
			String views[]={"VIEW"};  
			ResultSet rs1=dbmd.getTables(null,null,null,views);  
			
			while(rs1.next()){  
				System.out.println(rs1.getString(3));  
			}  
			   
			 con.close();  
		 } catch(Exception e){ System.out.println(e);}  
     } 
}



QUESTIONS:
-------------------
1. Which of the following statements accurately describes Java JDBC?

	A) JDBC is a platform-dependent API used for database connectivity in Java applications.
	B) JDBC is a set of Java interfaces and classes that allow Java applications to interact with various databases.
	C) JDBC is primarily used for creating user interfaces in Java applications.
	D) JDBC is a standalone programming language designed for database management.

2. Which of the following is NOT a core component of the JDBC API?

	A) DriverManager
	B) Connection
	C) Statement
	D) Compiler

3.What role does the DriverManager class play in JDBC?

	A) It provides methods for executing SQL queries.
	B) It manages a list of database drivers and establishes connections to databases.
	C) It creates and manages SQL databases.
	D) It processes the results returned by SQL queries.

4. Which interface is used to execute SQL queries and retrieve results in JDBC?

	A) Connection
	B) ResultSet
	C) Statement
	D) PreparedStatement

5. What is the primary advantage of using PreparedStatement over Statement in JDBC?

	A) PreparedStatement allows for more complex SQL queries.
	B) PreparedStatement is easier to implement than Statement.
	C) PreparedStatement improves performance by pre-compiling SQL statements and allows for parameterized queries.
	D) PreparedStatement is limited to read-only operations.

6. Which of the following types of JDBC drivers is known as a Type 1 driver?
	A) Thin Driver
	B) ODBC Bridge Driver
	C) Native-API Driver
	D) Type 4 Driver

7.What distinguishes a Type 4 JDBC driver?
	A) It requires native database client libraries to function.
	B) It converts JDBC calls directly into database-specific protocol calls.
	C) It uses ODBC to connect to databases.
	D) It is platform-dependent.
	
8.Which of the following is NOT a characteristic of a Type 2 JDBC driver?
	A) It requires native libraries for the database.
	B) It offers better performance than Type 1 drivers.
	C) It is written in Java and C.
	D) It is platform-independent.

9. Which of the following statements is true regarding the use of JDBC drivers?

	A) Only one type of JDBC driver can be used in a single application.
	B) Type 3 JDBC drivers convert JDBC calls to a middleware protocol before sending them to the database.
	C) Type 4 JDBC drivers are dependent on the underlying database software.
	D) JDBC drivers are typically written in C++ for performance reasons.

10. Which method of the DriverManager class is used to establish a connection to a database?

	A) getConnection()
	B) createConnection()
	C) openConnection()
	D) connectToDatabase()

11.Which of the following methods is NOT part of the Statement interface in JDBC?

	A) executeQuery()
	B) executeUpdate()
	C) prepareStatement()
	D) execute()
	
12. Which of the following is a key difference between the Statement and PreparedStatement interfaces in JDBC?

	A) Statement allows for parameterized queries while PreparedStatement does not.
	B) PreparedStatement is less efficient for executing static SQL statements compared to Statement.
	C) PreparedStatement pre-compiles SQL queries for better performance, while Statement does not.
	D) There is no difference; both interfaces serve the same purpose

13. Which of the following statements about the ResultSet interface is true?

	A) ResultSet allows for executing SQL statements directly.
	B) ResultSet provides methods for navigating through the result set and retrieving data.
	C) ResultSet can only contain a single row of data at a time.
	D) ResultSet is used to prepare SQL statements before execution.

14. Which method is used to move the cursor to the first row of a ResultSet?

	A) first()
	B) moveToFirst()
	C) next()
	D) previous()
	
15.Which of the following methods is used to set a parameter in a PreparedStatement?

	A) setParameter()
	B) addParameter()
	C) bindParameter()
	D) setXXX()
	
16.What will happen if you try to access a ResultSet after it has been closed?

	A) It will automatically refresh the ResultSet with the latest data.
	B) It will throw an SQLException indicating that the ResultSet is closed.
	C) It will still return the last accessed row.
	D) It will throw a NullPointerException
	
17. What is the purpose of the DatabaseMetaData interface in JDBC?

	A) To execute SQL queries and manage transactions.
	B) To provide information about the database as a whole, including its structure and capabilities.
	C) To manage the ResultSet for executing complex queries.
	D) To handle connection pooling and resource management.

